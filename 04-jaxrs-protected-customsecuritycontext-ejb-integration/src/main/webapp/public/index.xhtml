<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    template="../WEB-INF/template_index.xhtml">

    <ui:define name="page_name">Index</ui:define>
    
    <ui:define name="test_goals">
        <p>
            If I have an EJB protected by <code>@DeclareRoles</code>,
            <code>@RolesAllowed</code>, and with identity-management 
            groups in <code>glassfish-web.xml</code>, will a call
            to an <b>unprotected</b> JAX-RS endpoint with a 
            custom <code>SecurityContext</code> propagate
            the principal to the EJB container so security can
            be applied?            
        </p>
    </ui:define>
    
    <ui:define name="test_results">
        <p>
            <b>NO!!</b>
        </p>
        <blockquote>
            <p>
                Just to verify that the JAX-RS filter is working and that the
                custom <code>SecurityContext</code> is being created, you
                can look at the SecurityContext REST service
            </p>
            <blockquote>
                <p>
                    <h:outputLink value="#{request.contextPath}/rest/securityContext/details">
                        SecurityContext REST service...get SecurityContext details :)
                    </h:outputLink>
                </p>
            </blockquote>
            
            
            
            <p>
                Now, although it seems like the JAX-RS filter is working and the
                custom <code>SecurityContext</code> is being being created,
                the call to a protected EJB fails.  The following link
                calls the CustomerSupport REST service to get help contact
                information.  The JAX-RS service itself has no declared security.
                But, the JAX-RS service injects an EJB which is protected with
                <code>@RolesAllowed({"GROUP_CUSTOMER_SUPPORTS"})</code>.  You have
                this role so you should be able to call this EJB.  But an 
                <code>javax.ejb.EJBAccessException</code> happens instead. You can
                look at the <b>log file</b> to confirm code execution enters the 
                JAX-RS endpoint, but it fails calling the EJB.
            </p>
            <blockquote>
                <p>
                    <h:outputLink value="#{request.contextPath}/rest/customersupport/help">
                        Bad link: Customer support help REST resource...throws javax.ejb.EJBAccessException :(
                    </h:outputLink>
                </p>
            </blockquote>
            
            
            <p>
                So, just out of curiosity, if I call an unprotected EJB, what kind of 
                principal information can I get from the EJB <code>SessionContext</code>?
                Unfortunately, nothing good.  If you click the link below you'll see that
                from the the EJB <code>SessionContext</code> you get the default
                <code>ANONYMOUS</code> principal despite the JAX-RS filter creating
                the custom <code>SecurityContext</code>.
            </p>
            <blockquote>
                <p>
                    <h:outputLink value="#{request.contextPath}/rest/securityContext/principalName">
                        Bad link: SecurityContext REST service...get EJB Principal Name using standard Application configuration :(
                    </h:outputLink>
                </p>
            </blockquote>
            
            
            
            <p>
                Also out of curiosity, I wondered what I would get if I used
                Jersey-specific configuration.  So I tried that.  Same result.
                The JAX-RS filter creating the custom <code>SecurityContext</code>
                just doesn't propagate the Principal to the 
                EJB <code>SessionContext</code> - The EJB still has an
                <code>ANONYMOUS</code> principal.
            </p>
            <blockquote>
                <p>
                    <h:outputLink value="#{request.contextPath}/jersey/securityContext/principalName">
                        Bad link: SecurityContext REST service...get EJB Principal Name using Jersey-specific configuration :(
                    </h:outputLink>
                </p>
            </blockquote>
            
        </blockquote>
    </ui:define>
        
</ui:composition>
