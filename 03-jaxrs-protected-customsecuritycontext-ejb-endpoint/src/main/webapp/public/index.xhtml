<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition 
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
    xmlns:h="http://xmlns.jcp.org/jsf/html"
    xmlns:f="http://xmlns.jcp.org/jsf/core"
    template="../WEB-INF/template_index.xhtml">

    <ui:define name="page_name">Index</ui:define>

    <ui:define name="test_goals">
        <p>
            Can a JAX-RS filter and custom <code>SecurityContext</code> protect
            a JAX-RS endpoint which <b>IS</b> an EJB using
            <code>@RolesAllowed</code>, <code>@DeclaredRoles</code>, and identity management
            groups in <code>glassfish-web.xml</code>?
        </p>
    </ui:define>

    <ui:define name="test_results">
        <p>
            <b>No!</b>
        </p>
        <blockquote>
            <p>
                This is an attempt to not have jersey-specific code in the
                application in the hopes that the custom <code>SecurityContext</code>
                is used by the EJB.  Unfortunately, this doesn't seem to be
                the case.  
            </p>
            <p>
                First, there are 3 JAX-RS REST endpoints in this project.  All
                of them are <code>@Stateless</code> EJBs.  They are:
            </p>
            <ol>
                <li><code>CustomerSupportResource</code></li>
                <li><code>ExecutiveResource</code></li>
                <li><code>SecurityContextResource</code></li>
            </ol>
            <p>
                To verify the JAX-RS REST endpoint calls are being
                intercepted by the filter and a custom <code>SecurityContext</code>
                is being created and roles assigned, you can click on this
                unprotected link and see the custom <code>SecurityContext</code>
                details:
            </p>
            <blockquote>
                <p>
                    <h:outputLink value="#{request.contextPath}/standard/securityContext/details">
                        Unprotected SecurityContext details...
                    </h:outputLink>
                </p>
            </blockquote>
            <p>
                Now let's take a look at the other links.  None of the links work :(.  I've 
                provided an explaination for each.  I'm not sure if the explaination
                is correct, but it's the best I can figure out.
            </p>

            <table class="order-table">
                <thead>
                    <tr>
                        <th class="order-table-header" scope="col">LINK</th>
                        <th class="order-table-header" scope="col">DOES IT WORK?</th>
                        <th class="order-table-header" scope="col">WHY?</th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="order-table-odd-row">
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <h:outputLink value="#{request.contextPath}/jersey/executive/contract">
                                Executive REST Service...<br/><br/>(Jersey-specific Config)
                            </h:outputLink>
                        </td>
                        <td style="background-color: yellow;">
                            Maybe, see "Final Thoughts" below
                        </td>
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <p>
                                This link calls the Executive REST service to get 
                                contract details. It is protected by 
                                <code>@RolesAllowed({"GROUP_EXECUTIVES"})</code>.  You
                                do <b>not</b> have this role, so you should <b>not</b> be able
                                to access it.
                            </p>
                            <p>I say this link works because when you click it you
                                get a 403 - Forbidden HTTP error code, and I think this
                                is correct.
                            </p>
                            <p>
                                So here is what I think is going on...
                            </p>
                            <p>
                                This link uses the Jersey-specific application configuration 
                                (<code>org.glassfish.jersey.server.ResourceConfig</code>)
                                which does <code>register(RolesAllowedDynamicFeature.class);</code>.
                                So I think this is working as expected because this 
                                Jersey-specific configuration is protecting the REST call and
                                not allowing you to access it.
                            </p>
                              
                        </td>
                    </tr>
                    
                    
                    
                    <tr class="order-table-even-row">
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <h:outputLink value="#{request.contextPath}/jersey/customersupport/help">
                                CustomerSupport REST Service...<br/><br/>(Jersey-specific Config)
                            </h:outputLink>
                        </td>
                        <td style="background-color: red;">
                            NO
                        </td>
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <p>
                                This link calls the CustomerSupport REST service to get 
                                help details. It is protected by 
                                <code>@RolesAllowed({"GROUP_CUSTOMER_SUPPORTS"})</code>.
                                You <b>have</b> this role, so you <b>should</b> be able to
                                access it.
                            </p>
                            <p>
                                I say this link is not working because when you click it
                                you get an 500 - Internal Server Error code caused by
                                an <code>javax.ejb.EJBAccessException</code>. This isn't
                                right.  You should be able to access this because you
                                have the right role.
                            </p>
                            <p>
                                So here is what I think is going on...
                            </p>
                            <p>
                                1st, this link uses the Jersey-specific application configuration 
                                (<code>org.glassfish.jersey.server.ResourceConfig</code>)
                                which does <code>register(RolesAllowedDynamicFeature.class);</code>.
                                I think this Jersey-specific configuration is allowing 
                                you access to the REST service because you have the
                                GROUP_CUSTOMER_SUPPORTS role.  You don't get the 
                                403 - Forbidden HTTP error code like with the Executive
                                REST service.<br/><br/>
                                
                                2nd, however this call still fails with an 
                                <code>javax.ejb.EJBAccessException</code>.  I think 
                                that after getting past the Jersey-specific configuration,
                                the call is then passed off to the EJB container. But
                                because the custom <code>SecurityContext</code> is
                                created in a JAX-RS filter, this context isn't 
                                propegated correctly to the EJB container, so the
                                EJB container fails the call with an 
                                <code>javax.ejb.EJBAccessException</code>.
                            </p>
                              
                        </td>
                    </tr>
                    
                    
                    <tr class="order-table-odd-row">
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <h:outputLink value="#{request.contextPath}/standard/executive/contract">
                                Executive REST Service...<br/><br/>(Standard Config)
                            </h:outputLink>
                        </td>
                        <td style="background-color: yellow;">
                            Maybe, see "Final Thoughts" below
                        </td>
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <p>
                                This link calls the Executive REST service to get 
                                contract details. It is protected by 
                                <code>@RolesAllowed({"GROUP_EXECUTIVES"})</code>.  You
                                do <b>not</b> have this role, so you should <b>not</b> be able
                                to access it.
                            </p>
                            <p>I say this link works because when you click it you
                                get an 500 - Internal Server Error code caused by
                                an <code>javax.ejb.EJBAccessException</code>.  I 
                                think this is correct.  
                            </p>
                            <p>
                                So here is what I think is going on...
                            </p>
                            <p>
                                This link uses the standard JAX-RS configuration 
                                (<code>javax.ws.rs.core.Application</code>).  I know
                                that standard JAX-RS does not support <code>@RolesAllowed</code> 
                                (which is why Jersey-specific configuration is needed to 
                                support it).  So without the Jersey-specific code, JAX-RS
                                basically ignores the security.<br/><br/>
                                
                                However, the Executive REST service is also a
                                <code>@Stateless</code> EJB.  The EJB container 
                                definatley supports <code>@RolesAllowed</code>. 
                                So, when the EJB container tries to execute the 
                                method it figures out you do not have the
                                <code>GROUP_EXECUTIVES</code> role and so throws
                                an <code>javax.ejb.EJBAccessException</code>
                            </p>
                        </td>
                    </tr>
                    
                    
                    <tr class="order-table-even-row">
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <h:outputLink value="#{request.contextPath}/standard/customersupport/help">
                                CustomerSupport REST Service...<br/><br/>(Standard Config)
                            </h:outputLink>
                        </td>
                        <td style="background-color: red;">
                            NO
                        </td>
                        <td>
                            <!-- column header -->
                            <!-- row record -->
                            <p>
                                This link calls the CustomerSupport REST service to get 
                                help details. It is protected by 
                                <code>@RolesAllowed({"GROUP_CUSTOMER_SUPPORTS"})</code>.
                                You <b>have</b> this role, so you <b>should</b> be able to
                                access it.
                            </p>
                            <p>
                                I say this link is not working because when you click it
                                you get an 500 - Internal Server Error code caused by
                                an <code>javax.ejb.EJBAccessException</code>. This isn't
                                right.  You should be able to access this because you
                                have the right role.
                            </p>
                            <p>
                                So here is what I think is going on...
                            </p>
                            <p>
                                1st, this link uses the JAX-RS stanard application configuration 
                                (<code>javax.ws.rs.core.Application</code>).  Because
                                standard JAX-RS does not support <code>@RolesAllowed</code>,
                                JAX-RS does nothing to stop the method call.
                                <br/><br/>
                                2nd, because the CustomerSupport REST service is also
                                a <code>@Stateless</code> EJB, the EJB container is
                                next and it tries to execute the code.  The EJB container
                                definately supports <code>@RolesAllowed</code> so it
                                will try to get the prinicapl to check it.  Because
                                I'm getting an  <code>javax.ejb.EJBAccessException</code>,
                                this tells me the EJB container isn't finding the right
                                principal or roles. I can kind of understand this
                                being the case because The custom <code>SecurityContext</code> is
                                created in a JAX-RS filter, which isn't really integrated
                                into the EE server.  So my guess is that this context isn't 
                                propagated correctly to the EJB container, so the
                                EJB container fails the call with an 
                                <code>javax.ejb.EJBAccessException</code>.
                            </p>
                        </td>
                    </tr>
                    
                    
                </tbody>
            </table>
        </blockquote>
        
        
        <p>
            <b>Final Thoughts</b>
        </p>
        <blockquote>
            <p>
                There is a lot going on here and it's hard to figure out if things are working.  The final 
                test with the 
                <h:outputLink value="#{request.contextPath}/standard/executive/contract">
                    Executive REST Service...<br/><br/>(Standard Config)
                </h:outputLink> 
                really makes it clear that doing this trick with creating
                a custom <code>SecurityContext</code> in a JAX-RS filter just doesn't
                plug into the EE server like you would expected.  For the
                <h:outputLink value="#{request.contextPath}/standard/executive/contract">
                    Executive REST Service...<br/><br/>(Standard Config)
                </h:outputLink>
                test, you have the appropriate role but are not able to access
                the REST endpoint.  So if you look at the <span style="background-color: yellow">Maybe</span>s
                above and think about what's going on between the interation of the JAX-RS
                filter, the custom <code>SecurityContext</code>, and the EJB container, 
                it's pretty clear this doesn't work.
            </p>
            <p>
                Use EE 6+ JASPIC or EE 8+ Security API...it integrates as expected.
            </p>
        </blockquote>
    </ui:define>
</ui:composition>
